{"version":3,"sources":["lib.js","main.js"],"names":["uiButtons","myList","document","createElement","myPromise","Promise","resolve","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","button","value","listItem","innerHTML","appendChild","err","return","body","then","anchors","querySelectorAll","myFunction","event","console","log","this","preventDefault","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","addEventListener","handleFormSubmit","inputDate","getElementById","myDate","Date","group","getDate","getUTCMonth","getUTCDate","getUTCFullYear","groupEnd","feedbackDate","nextElementSibling","hidden","form","forms"],"mappings":"aACA,IAAAA,UAAA,CAAA,SAAA,SAAA,SAAA,YACAC,OAAAC,SAAAC,cAAA,MAcAC,UAAA,IAAAC,QAAA,SAAAC,GAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACA,IAAA,IAAAC,EAAAC,EAAAZ,UAAAa,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAA,IAAAU,EAAAN,EAAAO,MAGAC,EAAAjB,SAAAC,cAAA,MACAgB,EAAAC,UAAA,gBAAAH,EAAA,QACAhB,OAAAoB,YAAAF,IANA,MAAAG,GAAAd,GAAA,EAAAC,EAAAa,EAAA,QAAA,KAAAf,GAAAK,EAAAW,QAAAX,EAAAW,SAAA,QAAA,GAAAf,EAAA,MAAAC,GAQAP,SAAAsB,KAAAH,YAAApB,QACAK,MAOAF,UAAAqB,KAAA,WACA,IAAAC,EAAAxB,SAAAyB,iBAAA,KACAC,EAAA,SAAAC,GACAC,QAAAC,IAAAC,KAAAZ,WACAS,EAAAI,kBAJAC,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAMA,IAAA,IAAA2B,EAAAC,EAAAZ,EAAAb,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAAA,CAAAG,EAAAnB,MACAqB,iBAAA,QAAAX,GAAA,IAPA,MAAAN,GAAAa,GAAA,EAAAC,EAAAd,EAAA,QAAA,KAAAY,GAAAI,EAAAf,QAAAe,EAAAf,SAAA,QAAA,GAAAY,EAAA,MAAAC,MChCA,IDEAI,iBAAA,SAAAX,GAEAA,EAAAI,iBCIA,IAAAQ,EAAAvC,SAAAwC,eAAA,QACAC,EAAA,IAAAC,KAAAH,EAAAvB,OAEAY,QAAAC,IAAA,iBAAAF,GACAC,QAAAe,MAAA,6BACAf,QAAAC,IAAA,WAAAY,GACAb,QAAAC,IAAA,YAAAY,EAAAG,WDEAhB,QAAAC,IAAA,UAAAY,EAAAI,eACAjB,QAAAC,IAAA,SAAAY,EAAAK,cAAAlB,QAAAC,IAAA,SAAAY,EAAAM,kBCQAnB,QAAAoB,WDLA,IAAAC,EAAAV,EAAAW,mBACAjC,MAAAA,IACAlB,EAAAA,QACAwC,EAAAvB,MAAA,GAPAiC,EAAAE,QAAA,GAAAF,EAAAE,QAAA,GAhBAC,KAAApD,SAAAqD,MAAA,OAgBAD,OAAAA,KAAAf,iBAAA,SAAAC,kBAAA,GAAAc,KAAAf,iBAAA,SAAAC,kBAAA","file":"main.js","sourcesContent":["{\n  const uiButtons = ['Eagles', 'Flyers', 'Sixers', 'Phillies'];\n  const myList = document.createElement('ul');\n\n  /*\n  for (const button of uiButtons) {\n    // console.log(button);\n    console.log(`Current button: ${button}`);\n    const listItem = document.createElement('li');\n    listItem.innerHTML = `<a href=\"#\"> ${button} </a>`;\n    myList.appendChild(listItem);\n  }\n\n  document.body.appendChild(myList);\n\t*/\n\n  let myPromise = new Promise(resolve => {\n    for (const button of uiButtons) {\n      // console.log(button);\n      // console.log(`Current button: ${button}`);\n      const listItem = document.createElement('li');\n      listItem.innerHTML = `<a href=\"#\"> ${button} </a>`;\n      myList.appendChild(listItem);\n    }\n    document.body.appendChild(myList);\n    resolve();\n\n    // window.setTimeout(() => {\n    //   resolve();\n    // }, 3000);\n  });\n\n  myPromise.then(() => {\n    const anchors = document.querySelectorAll('a');\n    const myFunction = function(event) {\n      console.log(this.innerHTML);\n      event.preventDefault();\n    };\n    for (const anchor of anchors) {\n      anchor.addEventListener('click', myFunction, false);\n    }\n  });\n}\n","{\n  // const form = document.getElementById('myForm');\n  const form = document.forms['myForm'];\n\n  function handleFormSubmit(event) {\n    // Prevent the form submission from refreshing the page.\n    event.preventDefault();\n\n    const inputDate = document.getElementById('date');\n    const myDate = new Date(inputDate.value);\n\n    console.log('Form submitted', event);\n    console.group('Selected Date Information');\n    console.log(`myDate: ${myDate}`);\n    console.log(`getDate: ${myDate.getDate()}`);\n    /**\n     * Notice the day value is off by one.\n     * This occurs because we're taking a UTC date\n     * and converting it to our timezone which is 5\n     * hours behind. We need the date when not adjusting\n     * for timezone.\n     */\n    console.log(`Month: ${myDate.getUTCMonth()}`);\n    console.log(`Date: ${myDate.getUTCDate()}`);\n    console.log(`Year: ${myDate.getUTCFullYear()}`);\n    console.groupEnd();\n\n    // What happens when the input date is invalid?\n    const feedbackDate = inputDate.nextElementSibling;\n    if (isNaN(myDate)) {\n      inputDate.focus();\n      inputDate.value = '';\n      feedbackDate.hidden = false;\n    } else {\n      feedbackDate.hidden = true;\n    }\n\n    // Once we have a valid date, what can we do?\n  }\n\n  if (form) {\n    form.addEventListener('submit', handleFormSubmit, false);\n    form.addEventListener('change', handleFormSubmit, false);\n  }\n}\n"]}